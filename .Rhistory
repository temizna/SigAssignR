#vcfk2=vcfk1[refcgk,]
#katdist<-interMutDist(vcfk2)
#katks<-kata(katdist, assembly = "mm10", nmut=4)
kdVCF2 <- detectKataegis(genomicVariants =paste(sample_names[i,1],".vcf",sep=""), refSeq = "hg38",
penalty = "BIC", aggregateRecords = TRUE,minSizeKataegis = 2,IMDcutoff = 10000)
kdVCF3 <- detectKataegis(genomicVariants =paste(sample_names[i,1],".vcf",sep=""), refSeq = "hg38",
penalty = "BIC", aggregateRecords = TRUE,minSizeKataegis = 3,IMDcutoff = 10000)
kdVCF4 <- detectKataegis(genomicVariants =paste(sample_names[i,1],".vcf",sep=""), refSeq = "hg38",
penalty = "BIC", aggregateRecords = TRUE,minSizeKataegis = 4,IMDcutoff = 10000)
tot_nums[i]<-getInfo(kdVCF2)$totalGenomicVariants
tot_kats[i,1]<-getInfo(kdVCF2)$totalKataegisFoci
tot_var_in_kat[i,1]<-getInfo(kdVCF2)$totalVariantsInKataegisFoci
tot_kats[i,2]<-getInfo(kdVCF3)$totalKataegisFoci
tot_var_in_kat[i,2]<-getInfo(kdVCF3)$totalVariantsInKataegisFoci
tot_kats[i,3]<-getInfo(kdVCF4)$totalKataegisFoci
tot_var_in_kat[i,3]<-getInfo(kdVCF4)$totalVariantsInKataegisFoci
#if (getInfo(kdVCF2)$totalKataegisFoci<1) next
rf<-rainfallPlot(kdVCF2)
#rainfallPlot(kdVCF, showSegmentation = TRUE)
#rainfallPlot(kdVCF, showSegmentation = TRUE,showSequence = "Kataegis")
rf2<-rainfallPlot(kdVCF2,showSequence = "Kataegis")
ggsave(paste(sample_names2[i],".kat_all.2.a3.pdf",sep=""),rf,width=7,height=5)
ggsave(paste(sample_names2[i],".kat_only.2.a3.pdf",sep=""),rf2,width=7,height=5)
kats[[sample_names2[i]]]<-getKataegisFoci(kdVCF2)
}
totkats<-cbind(sample_names2,tot_nums,tot_kats,tot_var_in_kat)
totkats
citation("katdetectr")
?t.test
t.test(c(1,1,1,1,0,0),c(0,0,0,0,1))
t.test(c(1,1,1,1,0,0),c(0,0,0,0,1))
log10(1747)
#require(BSgenome.Hsapiens.UCSC.hg38)
#BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
#BiocManager::install("BSgenome.Mmusculus.UCSC.mm10")
#BiocManager::install("TxDb.Mmusculus.UCSC.mm10.knownGene")
ref_genome <- "BSgenome.Mmusculus.UCSC.mm10"
wDir<-"/Users/temizna/Google_Drive/UMN/HARRIS/CAM_TUMORS/DNA/Chemical_Carcinogen"
setwd(wDir)
#todo<-c("44_A3B.LIVER","48_A3B.LIVER","49_A3B.LIVER","125_APO1.LIVER","137_APO1.LIVER","153_APO1.LIVER")
# Enter VCF file paths as a table that will be fed in
#vcf_files <- read.table("vcflist")
#vcf_files <- read.table("vcflistall")
#vcf_files <- read.table("vcflist")
vcf_files <- read.table("vcflist420")
# Enter VCF sample names
sample_names <- read.table("samplenames")
read_vcf()
read_vcf
iputdata
vcf_files
inputdata=vcf_files[,1]
iputdata
inputdata
inputdata=vcf_files[1,1]
inputdata
temp=vcf_files[1,1]
inputdata=read_vcf(temp, genome_build = "mm10")
inputdata
inputdata@data
temp
vcf=read_vcfs_as_granges(vcf_files, sample_names,ref_genome=bsg)
bsg
vcf=read_vcfs_as_granges(vcf_files, sample_names,genome=mm10)
ref_genome
vcf=read_vcfs_as_granges(vcf_files, sample_names,genome=ref_genome)
vcf_files
sample_names
#todo<-c("44_A3B.LIVER","48_A3B.LIVER","49_A3B.LIVER","125_APO1.LIVER","137_APO1.LIVER","153_APO1.LIVER")
# Enter VCF file paths as a table that will be fed in
#vcf_files <- read.table("vcflist")
#vcf_files <- read.table("vcflistall")
#vcf_files <- read.table("vcflist")
vcf_files <- read.table("vcflist420")
# Enter VCF sample names
sample_names <- read.table("samplenames")
vcf=read_vcfs_as_granges(vcf_files[,1], sample_names[,1],genome=ref_genome)
vcf
vcf$DMBA_21_tum
vcf=read_vcfs_as_granges(vcf_files[,1], sample_names[,1],genome=ref_genome, type="snv")
vcf$DMBA_21_tum
vcf2maf
?read_vcf
mafs<-read_vcf(vcf_files[,1],genome_build = "mm10", samples = sample_names[,1])
mafs
mafs$data
mafs@data
mafs2=as.data.frame(mafs@data)
mafs2
genome()
genome
gen="mm10"
mafs2
mafs2[1:4,]
mafs2[1:4,c(2,3,6,4,5,1)
]
inputdata=mafs2[1:4,c(2,3,6,4,5,1)]
#default bsg = BSgenome.Hsapiens.UCSC.hg19
cols=c("chr","start","stop","ref","alt", "sample")
#input file/table should be ordered as "chr", "start", "stop", "ref", "alt", "sample")
colnames(inputdata)=c("chr","start","stop","ref","alt", "sample")
chrs=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,"X","Y")
allchr=which(inputdata$chr %in% chrs)
#filter ref and alt sof single base substitutions and remove any indels and longer mutations
inputdata=inputdata[allchr,]
in1=which(nchar(inputdata$alt)==1)
inputdata<-inputdata[in1,]
in2<-which(!(inputdata$alt=="-"))
inputdata<-inputdata[in2,]
in1r=which(nchar(inputdata$ref)==1)
inputdata<-inputdata[in1r,]
in2r<-which(!(inputdata$ref=="-"))
inputdata<-inputdata[in2r,]
inputdata
inputdata=mafs2[1:4,c(2,3,6,4,5,1)]
#default bsg = BSgenome.Hsapiens.UCSC.hg19
cols=c("chr","start","stop","ref","alt", "sample")
#input file/table should be ordered as "chr", "start", "stop", "ref", "alt", "sample")
colnames(inputdata)=c("chr","start","stop","ref","alt", "sample")
chrs=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,"X","Y")
inputdata
inputdata=mafs2[,c(2,3,6,4,5,1)]
#default bsg = BSgenome.Hsapiens.UCSC.hg19
cols=c("chr","start","stop","ref","alt", "sample")
#input file/table should be ordered as "chr", "start", "stop", "ref", "alt", "sample")
colnames(inputdata)=c("chr","start","stop","ref","alt", "sample")
inputdata
inputdata[1;4,]
inputdata[1:4,]
allchr=which(inputdata$chr %in% chrs)
allchr
chrs=c("chr1","chr2","chr3","chr4","chr5","chr6","chr7","chr8","chr9","chr10","chr11","chr12",
"chr13","chr14","chr15","chr16","chr17","chr18","chr19","chr20","chr21","chr22","X","Y")
allchr=which(inputdata$chr %in% chrs)
allchr
#filter ref and alt sof single base substitutions and remove any indels and longer mutations
inputdata=inputdata[allchr,]
in1=which(nchar(inputdata$alt)==1)
inputdata<-inputdata[in1,]
in2<-which(!(inputdata$alt=="-"))
inputdata<-inputdata[in2,]
in1r=which(nchar(inputdata$ref)==1)
inputdata<-inputdata[in1r,]
in2r<-which(!(inputdata$ref=="-"))
inputdata<-inputdata[in2r,]
inputdata<
inputdata
ext
ext=1
bsg
bsg=BSgenome.Mmusculus.UCSC.mm10
librar(BSgenome.Mmusculus.UCSC.mm10)
library(BSgenome.Mmusculus.UCSC.mm10)
grlinputdata<-GRanges(seqnames=inputdata$chr,
ranges=IRanges(start=inputdata$start-ext,end=inputdata$start+ext))
grlinputdata20<-GRanges(seqnames=inputdata$chr,
ranges=IRanges(start=inputdata$start-20,end=inputdata$start+20))
#get 41 bases around each SBS for APOBEC enrichment calculation
inputdata$twentycontext=BSgenome::getSeq(bsg,grlinputdata20,as.character=T)
inputdata$context=BSgenome::getSeq(bsg,grlinputdata,as.character=T)
inputdata[1:5,]
#identify and return the reverse complement for A/G ref positions and their alts
temprca<-which(inputdata$ref =="A")
temprcg<-which(inputdata$ref == "G")
inputdata$ref[temprca]=getRC(inputdata$ref[temprca])
inputdata$ref[temprcg]=getRC(inputdata$ref[temprcg])
#' Get the reverse complement of a DNA string
#'
#' @description et the reverse complement of a DNA string
#' @param s DNA sequence to be converted
#' @return reverse complement sequence string
#' @export
getRC<-function(s){
out<-character()
for(i in 1:nchar(s[1])){
nt<-substr(s,i,i)
out<-paste(ifelse(nt=="G","C",ifelse(nt=="C","G",ifelse(nt=="A","T","A"))),out,sep="")
}
return(out)
}
#' Execute one-sided Fisher's exact test
#'
#' @description Execute one-sided Fisher's exact test
#' @param x data frame with elements of contingency table as columns and samples as rows
#' @return Fisher's exact p-calue
#' @export
exe_fisher <- function(x) {
m <- matrix(unlist(x), ncol = 2, nrow = 2, byrow = F)
f <- fisher.test(m, alternative = "greater")
return(as.data.frame(f$p.value))
}
inputdata$ref[temprca]=getRC(inputdata$ref[temprca])
inputdata$ref[temprcg]=getRC(inputdata$ref[temprcg])
inputdata$alt[temprca]=getRC(inputdata$alt[temprca])
inputdata$alt[temprcg]=getRC(inputdata$alt[temprcg])
inputdata$twentycontext[temprca]=getRC(inputdata$twentycontext[temprca])
inputdata$twentycontext[temprcg]=getRC(inputdata$twentycontext[temprcg])
inputdata$context[temprca]=getRC(inputdata$context[temprca])
inputdata$context[temprcg]=getRC(inputdata$context[temprcg])
inputdata$con=paste(substr(inputdata$context,1,1),"[",inputdata$ref,">",inputdata$alt,"]",substr(inputdata$context,3,3),sep="")
inputdata[1:5,]
inputdata$ConTCW=str_count(inputdata$twentycontext,"TCA") + str_count(inputdata$twentycontext,"TCT")+
str_count(inputdata$twentycontext,"TGA") + str_count(inputdata$twentycontext,"TGT")
#' Calculate APOBEC enrichment
#'
#' @description Calculate APOBEC enrichment
#' @param inputdata a dataframe with columns of twentycontext (20 nucleotide context),
#'  con (trinucleotide context), sample (Sample names), mut_TCW (TCW context mutations),
#'  MutC (mutations at C) This dataframe is created using either read_nonvcf function or
#'  vcfs_to_inputdata function
#' @return enrichment table with adjusted p-values
#' @export
apobec_enrichment<-function(inputdata){
inputdata$ConTCW=str_count(inputdata$twentycontext,"TCA") + str_count(inputdata$twentycontext,"TCT")+
str_count(inputdata$twentycontext,"TGA") + str_count(inputdata$twentycontext,"TGT")
inputdata$ConC=str_count(inputdata$twentycontext,"C") + str_count(inputdata$twentycontext,"G")
#Mark TCW and C mutation
tc1<-which((as.character(inputdata$alt)=="A"))
tc21<-which(inputdata$context=="TCA")
tc22<-which(inputdata$context=="TCT")
inputdata$mut_TCW=0
inputdata$mut_TCW[tc21]=1
inputdata$mut_TCW[tc22]=1
inputdata$mut_TCW[tc1]=0
inputdata$MutC=0
c1<-which(as.character(inputdata$ref)=="C")
c12<-which((as.character(inputdata$alt)=="A"))
inputdata$MutC[c1]=1
inputdata$MutC[c12]=0
#count the TCW and C contexts and mutations to create the contingency table
ta<-aggregate(as.numeric(inputdata$mut_TCW),by=list(inputdata$sample), FUN="sum")
ta1<-aggregate(as.numeric(inputdata$mut_TCW),by=list(inputdata$sample), FUN="sum")$x
ta2<-aggregate(as.numeric(inputdata$MutC),by=list(inputdata$sample), FUN="sum")$x
ta3<-aggregate(inputdata$ConTCW,by=list(inputdata$sample), FUN="sum")$x
ta4<-aggregate(inputdata$ConC,by=list(inputdata$sample), FUN="sum")$x
enrich.table=data.frame(mutTCW=ta1, ConTCW=ta3,mutC=ta2, ConC=ta4, row.names = ta$Group.1)
enrich.table$score=(enrich.table$mutTCW/enrich.table$ConTCW)/(enrich.table$mutC/enrich.table$ConC)
enrich.table$MutRatio=enrich.table$mutTCW/enrich.table$ConTCW
enrich.table$ConRatio=enrich.table$mutC/enrich.table$ConC
enrich.table$mutC_TCW=enrich.table$mutC-enrich.table$mutTCW
enrich.table$conC_TCW=enrich.table$ConC-enrich.table$ConTCW
entest<-as.data.frame(enrich.table[,c(1,2,8,9)])
entest2<-as.data.frame(enrich.table[,1:4])
fishers <- t(as.data.frame(apply(entest, 1, exe_fisher)))
fishers <- as.data.frame(fishers)
fishers2 <- t(as.data.frame(apply(entest2, 1, exe_fisher)))
fishers2 <- as.data.frame(fishers2)
fishers2$BH<-p.adjust(fishers2$V1, method="BH")
fishers2$Bon<-p.adjust(fishers2$V1, method="bonferroni")
enrich.table$fisher_pval <- fishers$V1
enrich.table$bh_adj_qval <- p.adjust(enrich.table$fisher_pval, method = "BH")
#enrich.table=enrich.table[sort(enrich.table[,11]),]
return(enrich.table)
}
enrichtest<-apobec_enrichment(inputdata)
enrichtest
inputdata[1:40,]
inputdata[1:10,]
inputdata$ConC=str_count(inputdata$twentycontext,"C") + str_count(inputdata$twentycontext,"G")
#Mark TCW and C mutation
tc1<-which((as.character(inputdata$alt)=="A"))
tc21<-which(inputdata$context=="TCA")
tc22<-which(inputdata$context=="TCT")
inputdata$mut_TCW=0
inputdata$mut_TCW[tc21]=1
inputdata$mut_TCW[tc22]=1
inputdata$mut_TCW[tc1]=0
inputdata$MutC=0
c1<-which(as.character(inputdata$ref)=="C")
c12<-which((as.character(inputdata$alt)=="A"))
inputdata$MutC[c1]=1
inputdata$MutC[c12]=0
inputdata[1:10,]
inputdata[1:20,]
inputdata[1:40,]
ta<-aggregate(as.numeric(inputdata$mut_TCW),by=list(inputdata$sample), FUN="sum")
ta1<-aggregate(as.numeric(inputdata$mut_TCW),by=list(inputdata$sample), FUN="sum")$x
ta2<-aggregate(as.numeric(inputdata$MutC),by=list(inputdata$sample), FUN="sum")$x
ta3<-aggregate(inputdata$ConTCW,by=list(inputdata$sample), FUN="sum")$x
ta4<-aggregate(inputdata$ConC,by=list(inputdata$sample), FUN="sum")$x
enrich.table=data.frame(mutTCW=ta1, ConTCW=ta3,mutC=ta2, ConC=ta4, row.names = ta$Group.1)
enrich.table
enrich.table$score=(enrich.table$mutTCW/enrich.table$ConTCW)/(enrich.table$mutC/enrich.table$ConC)
enrich.table$MutRatio=enrich.table$mutTCW/enrich.table$ConTCW
enrich.table$ConRatio=enrich.table$mutC/enrich.table$ConC
enrich.table$mutC_TCW=enrich.table$mutC-enrich.table$mutTCW
enrich.table$conC_TCW=enrich.table$ConC-enrich.table$ConTCW
enrich.table
entest<-as.data.frame(enrich.table[,c(1,2,8,9)])
entest2<-as.data.frame(enrich.table[,1:4])
fishers <- t(as.data.frame(apply(entest, 1, exe_fisher)))
fishers <- as.data.frame(fishers)
fishers2 <- t(as.data.frame(apply(entest2, 1, exe_fisher)))
fishers2 <- as.data.frame(fishers2)
fishers
fishers2
exe_fisher()
exe_fisher
exe_fisher(entest[1,])
m <- matrix(unlist(entest[1,]), ncol = 2, nrow = 2, byrow = F)
m
entest
enrich.table
enrich.table$fisher_pval <- fishers$V1
enrich.table$bh_adj_qval <- p.adjust(enrich.table$fisher_pval, method = "BH")
enrich.table
enrich.table$Bon <- p.adjust(enrich.table$fisher_pval, method = "bonferroni")
enrich.table
getwd()
setwd("/Users/temizna/SigAssignR")
x34=assign_signature(cancer_signatures, mut_mat2)
#' @export
assign_signature<-function(known_sig_mat, mat, cut_off=0.03){
#if(is.na(known_sig_mat)) known_sig_mat=cancer_signatures
if(dim(known_sig_mat)[1] != dim(mat)[1]){
stop("Number of mutational channels are not equal")
}
assigned.coeff<-matrix(nrow=dim(mat)[2],ncol=dim(known_sig_mat)[2])
assigned.fit<-matrix(nrow=dim(known_sig_mat)[1],ncol=dim(mat)[2])
assigned.res<-matrix(nrow=dim(known_sig_mat)[1],ncol=dim(mat)[2])
assigned.dev=vector(length=dim(mat)[2])
names(assigned.dev)=colnames(mat)
rownames(assigned.coeff)<-colnames(mat)
colnames(assigned.fit)<-colnames(mat)
colnames(assigned.res)<-colnames(mat)
colnames(assigned.coeff)=colnames(known_sig_mat)
rownames(assigned.fit)=rownames(known_sig_mat)
rownames(assigned.res)=rownames(known_sig_mat)
for (i in colnames(mat)){
muts=sum(mat[,i])
assign.sol=nnls(known_sig_mat,mat[,i])
sigtouse=which(assign.sol$x>=cut_off)
assigned.coeff[i,]=assign.sol$x
if (length(sigtouse) >= 2){
assign.sol=nnls(known_sig_mat[,sigtouse],mat[,i])
assigned.coeff[i,]=0
assigned.coeff[i,sigtouse]=assign.sol$x
}
assigned.fit[,i]=round(assign.sol$fitted[,1])
assigned.res[,i]=round(assign.sol$residuals[,1])
assigned.dev[i]=assign.sol$deviance
}
results=list(coefficient=floor(assigned.coeff), fitted=floor(assigned.fit),residuals=floor(assigned.res), deviance=assigned.dev)
return(results)
}
x34=assign_signature(cancer_signatures, mut_mat2)
sp_url<-"/Users/temizna/Google_Drive/UMN/HARRIS/apobec3b/RNA_EDITING/signatures_probabilities.txt"
cancer_signatures = read.table(sp_url, sep = "\t", header = TRUE)
new_order = match(row.names(mut_mat), cancer_signatures$Somatic.Mutation.Type)
#' Make mutation count matrix of 96 trinucleotides from a dataframe with contexts and samplenames
#' for each mutation (this data frame is created using read_nonvcf)
#'
#' @description Make 96 trinucleotide mutation count matrix
#' @param inputdata Dataframe containing con (context column) and sample column to form the mutation matrix
#' @return 96 mutation count matrix
#' @export
mutmat_nonvcf<-function(inputdata){
#create the mutation matrix from nonvcf inputdata (see read_nonvcf.R for creating the inputdata from a nonvcf table)
mutorder=c("A[C>A]A","A[C>A]C","A[C>A]G","A[C>A]T","C[C>A]A","C[C>A]C","C[C>A]G","C[C>A]T",
"G[C>A]A","G[C>A]C","G[C>A]G","G[C>A]T","T[C>A]A","T[C>A]C","T[C>A]G","T[C>A]T",
"A[C>G]A","A[C>G]C","A[C>G]G","A[C>G]T","C[C>G]A","C[C>G]C","C[C>G]G","C[C>G]T",
"G[C>G]A","G[C>G]C","G[C>G]G","G[C>G]T","T[C>G]A","T[C>G]C","T[C>G]G","T[C>G]T",
"A[C>T]A","A[C>T]C","A[C>T]G","A[C>T]T","C[C>T]A","C[C>T]C","C[C>T]G","C[C>T]T",
"G[C>T]A","G[C>T]C","G[C>T]G","G[C>T]T","T[C>T]A","T[C>T]C","T[C>T]G","T[C>T]T",
"A[T>A]A","A[T>A]C","A[T>A]G","A[T>A]T","C[T>A]A","C[T>A]C","C[T>A]G","C[T>A]T",
"G[T>A]A","G[T>A]C","G[T>A]G","G[T>A]T","T[T>A]A","T[T>A]C","T[T>A]G","T[T>A]T",
"A[T>C]A","A[T>C]C","A[T>C]G","A[T>C]T","C[T>C]A","C[T>C]C","C[T>C]G","C[T>C]T",
"G[T>C]A","G[T>C]C","G[T>C]G","G[T>C]T","T[T>C]A","T[T>C]C","T[T>C]G","T[T>C]T",
"A[T>G]A","A[T>G]C","A[T>G]G","A[T>G]T","C[T>G]A","C[T>G]C","C[T>G]G","C[T>G]T",
"G[T>G]A","G[T>G]C","G[T>G]G","G[T>G]T","T[T>G]A","T[T>G]C","T[T>G]G","T[T>G]T")
mut.table<-table(inputdata$con,inputdata$sample)
mut.table=mut.table[mutorder,]
return(mut.table)
}
mutmat<-mutmat_nonvcf(inputdata = inputdata)
mutmat
x34=assign_signature(cancer_signatures, mut_mat)
x34=assign_signature(cancer_signatures, mutmat)
library(nnls)
library(MutationalPatterns)
library(ggplot2)
x34=assign_signature(cancer_signatures, mutmat)
cancer_signatures
new_order = match(row.names(mut_mat), cancer_signatures$Somatic.Mutation.Type)
cancer_signatures = as.matrix(cancer_signatures[,4:33])
cancer_signatures
x34=assign_signature(cancer_signatures, mutmat)
x34
a2=plot_sigs(x34$coefficient, mode="absolute")
#' plot_sigs(fit$coefficient, mode="relative")
#'
#' ## Plot the absolute contribution.
#' ## When plotting absolute NMF results, the signatures need to be included.
#' plot_sigs(fit$coefficient,
#'   mode = "absolute"
#' )
#'
#'
#' @export
plot_sigs<-function(fit, mode = c("relative", "absolute"), signatures=NA){
mode <- match.arg(mode)
if(!(is.na(signatures))){
fit=fit[,signatures]
}
#if there are less than 10 mutations assgined to a signature, remove those
# signatures from the plot
zero_sigs=which(colSums(fit)<10)
fit=fit[,-zero_sigs]
Sample <- Contribution <- Signature <- NULL
tb <-t(fit) %>% as.data.frame() %>% tibble::rownames_to_column("Signature") %>%
tidyr::pivot_longer(-Signature, names_to = "Sample",
values_to = "Contribution") %>% dplyr::mutate(Sample = factor(Sample,
levels = unique(Sample)), Signature = factor(Signature,
levels = unique(Signature)))
if (mode == "absolute") {
bar_geom <- geom_bar(position=position_stack(reverse = TRUE),stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
present_sigs <- tb %>% dplyr::filter(Contribution != 0) %>%
dplyr::pull(Signature) %>% unique()
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x=theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)))
}
a2=plot_sigs(x34$coefficient, mode="absolute")
fit=x34
fit=x34$coefficient
fit
mode="absolute"
if(!(is.na(signatures))){
fit=fit[,signatures]
}
signatures=NA
if(!(is.na(signatures))){
fit=fit[,signatures]
}
#if there are less than 10 mutations assgined to a signature, remove those
# signatures from the plot
zero_sigs=which(colSums(fit)<10)
zero_sigs
fit=fit[,-zero_sigs]
Sample <- Contribution <- Signature <- NULL
tb <-t(fit) %>% as.data.frame() %>% tibble::rownames_to_column("Signature") %>%
tidyr::pivot_longer(-Signature, names_to = "Sample",
values_to = "Contribution") %>% dplyr::mutate(Sample = factor(Sample,
levels = unique(Sample)), Signature = factor(Signature,
levels = unique(Signature)))
tb
if (mode == "absolute") {
bar_geom <- geom_bar(position=position_stack(reverse = TRUE),stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
present_sigs <- tb %>% dplyr::filter(Contribution != 0) %>%
dplyr::pull(Signature) %>% unique()
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x=theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)))
?axis.text.x
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)))
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs)# +
plor
plot
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())#+theme(axis.title.x=element_blank(),
plot
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
plot
library(devtools)
getwd
getwd()
build()
library(roxygen2)
document()
document()
document()
library(SigAssignR)
detach("package:SigAssignR", unload = TRUE)
remove.packages("SigAssignR", lib="~/Library/R/arm64/4.3/library")
document()
build()
install_github("temizna/SigAssignR")
install_github("temizna/SigAssignR")
install.packages("~/SigAssignR_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(SigAssignR)
