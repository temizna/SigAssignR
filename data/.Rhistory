in1r=which(nchar(inputdata$ref)==1)
inputdata<-inputdata[in1r,]
in2r<-which(!(inputdata$ref=="-"))
inputdata<-inputdata[in2r,]
inputdata
grlinputdata<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-ext,end=inputdata$start+ext))
grlinputdata20<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-20,end=inputdata$start+20))
#get 41 bases around each SBS for APOBEC enrichment calculation
inputdata$twentycontext=BSgenome::getSeq(bsg,grlinputdata20,as.character=T)
allchr=
allchr
inputdata
table(inputdata$chr)
allchr=which(inputdata$chr %in% chrs)
dim(inputdata)
length(allchr)
#filter ref and alt sof single base substitutions and remove any indels and longer mutations
inputdata=inputdata[allchr,]
dim(inputdata)
in1=which(nchar(inputdata$alt)==1)
in1
inputdata<-inputdata[in1,]
in2<-which(!(inputdata$alt=="-"))
inputdata<-inputdata[in2,]
in1r=which(nchar(inputdata$ref)==1)
inputdata<-inputdata[in1r,]
in2r<-which(!(inputdata$ref=="-"))
inputdata<-inputdata[in2r,]
grlinputdata<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-ext,end=inputdata$start+ext))
grlinputdata20<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-20,end=inputdata$start+20))
#get 41 bases around each SBS for APOBEC enrichment calculation
inputdata$twentycontext=BSgenome::getSeq(bsg,grlinputdata20,as.character=T)
inputdata$context=BSgenome::getSeq(bsg,grlinputdata,as.character=T)
#identify and return the reverse complement for A/G ref positions and their alts
temprca<-which(inputdata$ref =="A")
temprcg<-which(inputdata$ref == "G")
inputdata$ref[temprca]=getRC(inputdata$ref[temprca])
inputdata$ref[temprcg]=getRC(inputdata$ref[temprcg])
inputdata$alt[temprca]=getRC(inputdata$alt[temprca])
inputdata$alt[temprcg]=getRC(inputdata$alt[temprcg])
inputdata$twentycontext[temprca]=getRC(inputdata$twentycontext[temprca])
inputdata$twentycontext[temprcg]=getRC(inputdata$twentycontext[temprcg])
inputdata$context[temprca]=getRC(inputdata$context[temprca])
inputdata$context[temprcg]=getRC(inputdata$context[temprcg])
inputdata$con=paste(substr(inputdata$context,1,1),"[",inputdata$ref,">",inputdata$alt,"]",substr(inputdata$context,3,3),sep="")
inputdata<-unique(inputdata)
return(inputdata)
read_nonvcf<-function(inputdata, bsg=bsg, ext=1){
#default bsg = BSgenome.Hsapiens.UCSC.hg19
cols=c("chr","start","stop","ref","alt", "sample")
#input file/table should be ordered as "chr", "start", "stop", "ref", "alt", "sample")
colnames(inputdata)=c("chr","start","stop","ref","alt", "sample")
chrs=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,"X","Y")
allchr=which(inputdata$chr %in% chrs)
#filter ref and alt sof single base substitutions and remove any indels and longer mutations
inputdata=inputdata[allchr,]
in1=which(nchar(inputdata$alt)==1)
inputdata<-inputdata[in1,]
in2<-which(!(inputdata$alt=="-"))
inputdata<-inputdata[in2,]
in1r=which(nchar(inputdata$ref)==1)
inputdata<-inputdata[in1r,]
in2r<-which(!(inputdata$ref=="-"))
inputdata<-inputdata[in2r,]
grlinputdata<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-ext,end=inputdata$start+ext))
grlinputdata20<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-20,end=inputdata$start+20))
#get 41 bases around each SBS for APOBEC enrichment calculation
inputdata$twentycontext=BSgenome::getSeq(bsg,grlinputdata20,as.character=T)
inputdata$context=BSgenome::getSeq(bsg,grlinputdata,as.character=T)
#identify and return the reverse complement for A/G ref positions and their alts
temprca<-which(inputdata$ref =="A")
temprcg<-which(inputdata$ref == "G")
inputdata$ref[temprca]=getRC(inputdata$ref[temprca])
inputdata$ref[temprcg]=getRC(inputdata$ref[temprcg])
inputdata$alt[temprca]=getRC(inputdata$alt[temprca])
inputdata$alt[temprcg]=getRC(inputdata$alt[temprcg])
inputdata$twentycontext[temprca]=getRC(inputdata$twentycontext[temprca])
inputdata$twentycontext[temprcg]=getRC(inputdata$twentycontext[temprcg])
inputdata$context[temprca]=getRC(inputdata$context[temprca])
inputdata$context[temprcg]=getRC(inputdata$context[temprcg])
inputdata$con=paste(substr(inputdata$context,1,1),"[",inputdata$ref,">",inputdata$alt,"]",substr(inputdata$context,3,3),sep="")
inputdata<-unique(inputdata)
return(inputdata)
}
inputdata=read_nonvcf(example_nonvcf)
inputdata2=read_nonvcf(example_nonvcf)
#get 41 bases around each SBS for APOBEC enrichment calculation
inputdata$twentycontext=BSgenome::getSeq(bsg,grlinputdata20,as.character=T)
inputdata=example_nonvcf
#default bsg = BSgenome.Hsapiens.UCSC.hg19
cols=c("chr","start","stop","ref","alt", "sample")
#input file/table should be ordered as "chr", "start", "stop", "ref", "alt", "sample")
colnames(inputdata)=c("chr","start","stop","ref","alt", "sample")
chrs=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,"X","Y")
allchr=which(inputdata$chr %in% chrs)
#filter ref and alt sof single base substitutions and remove any indels and longer mutations
inputdata=inputdata[allchr,]
in1=which(nchar(inputdata$alt)==1)
inputdata<-inputdata[in1,]
in2<-which(!(inputdata$alt=="-"))
inputdata<-inputdata[in2,]
in1r=which(nchar(inputdata$ref)==1)
inputdata<-inputdata[in1r,]
in2r<-which(!(inputdata$ref=="-"))
inputdata<-inputdata[in2r,]
grlinputdata<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-ext,end=inputdata$start+ext))
grlinputdata20<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-20,end=inputdata$start+20))
#get 41 bases around each SBS for APOBEC enrichment calculation
inputdata$twentycontext=BSgenome::getSeq(bsg,grlinputdata20,as.character=T)
inputdata$context=BSgenome::getSeq(bsg,grlinputdata,as.character=T)
#identify and return the reverse complement for A/G ref positions and their alts
temprca<-which(inputdata$ref =="A")
temprcg<-which(inputdata$ref == "G")
inputdata$ref[temprca]=getRC(inputdata$ref[temprca])
inputdata$ref[temprcg]=getRC(inputdata$ref[temprcg])
inputdata$alt[temprca]=getRC(inputdata$alt[temprca])
inputdata$alt[temprcg]=getRC(inputdata$alt[temprcg])
inputdata$twentycontext[temprca]=getRC(inputdata$twentycontext[temprca])
inputdata$twentycontext[temprcg]=getRC(inputdata$twentycontext[temprcg])
inputdata$context[temprca]=getRC(inputdata$context[temprca])
inputdata$context[temprcg]=getRC(inputdata$context[temprcg])
inputdata$con=paste(substr(inputdata$context,1,1),"[",inputdata$ref,">",inputdata$alt,"]",substr(inputdata$context,3,3),sep="")
inputdata<-unique(inputdata)
inputdata
bsg
which(example_nonvcf$chr=="MT")
example_nonvcf[-which(example_nonvcf$chr=="MT"),]
example_nonvcf=example_nonvcf[-which(example_nonvcf$chr=="MT"),]
example_nonvcf=example_nonvcf[-which(example_nonvcf$chr=="MT"),]
which(example_nonvcf$chr=="MT")
load(file="example_nonvcf.rda")
example_nonvcf
example_nonvcf=example_nonvcf[-which(example_nonvcf$chr=="MT"),]
example_nonvcf=example_nonvcf[-which(example_nonvcf$chr=="GL"),]
load(file="example_nonvcf.rda")
example_nonvcf=example_nonvcf[-which(example_nonvcf$chr=="MT"),]
table(example_nonvcf$chr)
example_nonvcf=example_nonvcf[-which(example_nonvcf$chr=="GL000209.1"),]
table(example_nonvcf$chr)
save(example_nonvcf,file="exampl_nonvcf.rda")
read_nonvcf<-function(inputdata, bsg=bsg, ext=1){
#default bsg = BSgenome.Hsapiens.UCSC.hg19
cols=c("chr","start","stop","ref","alt", "sample")
#input file/table should be ordered as "chr", "start", "stop", "ref", "alt", "sample")
colnames(inputdata)=c("chr","start","stop","ref","alt", "sample")
chrs=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,"X","Y")
allchr=which(inputdata$chr %in% chrs)
#filter ref and alt sof single base substitutions and remove any indels and longer mutations
inputdata=inputdata[allchr,]
in1=which(nchar(inputdata$alt)==1)
inputdata<-inputdata[in1,]
in2<-which(!(inputdata$alt=="-"))
inputdata<-inputdata[in2,]
in1r=which(nchar(inputdata$ref)==1)
inputdata<-inputdata[in1r,]
in2r<-which(!(inputdata$ref=="-"))
inputdata<-inputdata[in2r,]
grlinputdata<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-ext,end=inputdata$start+ext))
grlinputdata20<-GRanges(seqnames=paste("chr",inputdata$chr,sep=""),
ranges=IRanges(start=inputdata$start-20,end=inputdata$start+20))
#get 41 bases around each SBS for APOBEC enrichment calculation
inputdata$twentycontext=BSgenome::getSeq(bsg,grlinputdata20,as.character=T)
inputdata$context=BSgenome::getSeq(bsg,grlinputdata,as.character=T)
#identify and return the reverse complement for A/G ref positions and their alts
temprca<-which(inputdata$ref =="A")
temprcg<-which(inputdata$ref == "G")
inputdata$ref[temprca]=getRC(inputdata$ref[temprca])
inputdata$ref[temprcg]=getRC(inputdata$ref[temprcg])
inputdata$alt[temprca]=getRC(inputdata$alt[temprca])
inputdata$alt[temprcg]=getRC(inputdata$alt[temprcg])
inputdata$twentycontext[temprca]=getRC(inputdata$twentycontext[temprca])
inputdata$twentycontext[temprcg]=getRC(inputdata$twentycontext[temprcg])
inputdata$context[temprca]=getRC(inputdata$context[temprca])
inputdata$context[temprcg]=getRC(inputdata$context[temprcg])
inputdata$con=paste(substr(inputdata$context,1,1),"[",inputdata$ref,">",inputdata$alt,"]",substr(inputdata$context,3,3),sep="")
inputdata<-unique(inputdata)
return(inputdata)
}
exampledata=read_nonvcf(example_nonvcf, bsg=bsg)
mutmat=mutmat_nonvcf(exampledata)
mutmat
ex=assign_signature(known_sig_mat = known_sig_mat, mat=mutmat)
library(nnls)
ex=assign_signature(known_sig_mat = known_sig_mat, mat=mutmat)
ex
fit=ex$coefficient
colSums(fit)
assigned.coeff
fit
?lower
?round
assign_signature<-function(known_sig_mat, mat, cut_off=0.03){
#if(is.na(known_sig_mat)) known_sig_mat=cancer_signatures
if(dim(known_sig_mat)[1] != dim(mat)[1]){
stop("Number of mutational channels are not equal")
}
assigned.coeff<-matrix(nrow=dim(mat)[2],ncol=dim(known_sig_mat)[2])
assigned.fit<-matrix(nrow=dim(known_sig_mat)[1],ncol=dim(mat)[2])
assigned.res<-matrix(nrow=dim(known_sig_mat)[1],ncol=dim(mat)[2])
assigned.dev=vector(length=dim(mat)[2])
names(assigned.dev)=colnames(mat)
rownames(assigned.coeff)<-colnames(mat)
colnames(assigned.fit)<-colnames(mat)
colnames(assigned.res)<-colnames(mat)
colnames(assigned.coeff)=colnames(known_sig_mat)
rownames(assigned.fit)=rownames(known_sig_mat)
rownames(assigned.res)=rownames(known_sig_mat)
for (i in colnames(mat)){
muts=sum(mat[,i])
assign.sol=nnls(known_sig_mat,mat[,i])
sigtouse=which(assign.sol$x>=cut_off)
assigned.coeff[i,]=assign.sol$x
if (length(sigtouse) >= 2){
assign.sol=nnls(known_sig_mat[,sigtouse],mat[,i])
assigned.coeff[i,]=0
assigned.coeff[i,sigtouse]=assign.sol$x
}
assigned.fit[,i]=round(assign.sol$fitted[,1])
assigned.res[,i]=round(assign.sol$residuals[,1])
assigned.dev[i]=assign.sol$deviance
}
results=list(coefficient=floor(assigned.coeff), fitted=floor(assigned.fit),residuals=floor(assigned.res), deviance=assigned.dev)
return(results)
}
ex=assign_signature(known_sig_mat = known_sig_mat, mat=mutmat)
fit=ex$coefficient
colSums(fit)
plot_sigs<-function(fit, mode = c("relative", "absolute"), signatures=NA){
mode <- match.arg(mode)
if(!(is.na(signatures))){
fit=fit[,signatures]
}
#if there are less than 10 mutations assgined to a signature, remove those
# signatures from the plot
zero_sigs=which(colSums(fit)<10)
fit=fit[,-zero_sigs]
Sample <- Contribution <- Signature <- NULL
if (mode == "absolute" & !is.na(signatures)) {
total_signatures <- colSums(signatures)
abs_contribution <- contribution * total_signatures
}
tb <-t(fit) %>% as.data.frame() %>% tibble::rownames_to_column("Signature") %>%
tidyr::pivot_longer(-Signature, names_to = "Sample",
values_to = "Contribution") %>% dplyr::mutate(Sample = factor(Sample,
levels = unique(Sample)), Signature = factor(Signature,
levels = unique(Signature)))
if (mode == "absolute") {
bar_geom <- geom_bar(stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
present_sigs <- tb %>% dplyr::filter(Contribution != 0) %>%
dplyr::pull(Signature) %>% unique()
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
}
plot_sigs(fit, mode="relative")
a=plot_sigs(fit, mode="relative")
a
#if there are less than 10 mutations assgined to a signature, remove those
# signatures from the plot
zero_sigs=which(colSums(fit)<10)
zero_sigs
fit=fit[,-zero_sigs]
Sample <- Contribution <- Signature <- NULL
fit
tb <-t(fit) %>% as.data.frame() %>% tibble::rownames_to_column("Signature") %>%
tidyr::pivot_longer(-Signature, names_to = "Sample",
values_to = "Contribution") %>% dplyr::mutate(Sample = factor(Sample,
levels = unique(Sample)), Signature = factor(Signature,
levels = unique(Signature)))
tb
a=plot_sigs(fit, mode="absolute")
a
tb
?geom_bar
?plot_contribution
plot_contribution()
plot_contribution
nmf_res <- readRDS(system.file("states/nmf_res_data.rds",
package = "MutationalPatterns"
))
colnames(nmf_res$signatures) <- c("Signature A", "Signature B")
rownames(nmf_res$contribution) <- c("Signature A", "Signature B")
plot_contribution(nmf_res$contribution)
plot_contribution(nmf_res$contribution,
nmf_res$signature,
mode = "absolute"
)
nmf_res$signature
nmf_res$contribution
a=plot_sigs(fit, mode="absolute")
a
-
plot_sigs<-function(fit, mode = c("relative", "absolute"), signatures=NA){
mode <- match.arg(mode)
if(!(is.na(signatures))){
fit=fit[,signatures]
}
#if there are less than 10 mutations assgined to a signature, remove those
# signatures from the plot
zero_sigs=which(colSums(fit)<10)
fit=fit[,-zero_sigs]
Sample <- Contribution <- Signature <- NULL
if (mode == "absolute" ) {
abs_contribution <- fit
}
tb <-t(fit) %>% as.data.frame() %>% tibble::rownames_to_column("Signature") %>%
tidyr::pivot_longer(-Signature, names_to = "Sample",
values_to = "Contribution") %>% dplyr::mutate(Sample = factor(Sample,
levels = unique(Sample)), Signature = factor(Signature,
levels = unique(Signature)))
if (mode == "absolute") {
bar_geom <- geom_bar(position=stack,stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
present_sigs <- tb %>% dplyr::filter(Contribution != 0) %>%
dplyr::pull(Signature) %>% unique()
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
}
a=plot_sigs(fit, mode="absolute")
?position_stack
plot_sigs<-function(fit, mode = c("relative", "absolute"), signatures=NA){
mode <- match.arg(mode)
if(!(is.na(signatures))){
fit=fit[,signatures]
}
#if there are less than 10 mutations assgined to a signature, remove those
# signatures from the plot
zero_sigs=which(colSums(fit)<10)
fit=fit[,-zero_sigs]
Sample <- Contribution <- Signature <- NULL
if (mode == "absolute" ) {
abs_contribution <- fit
}
tb <-t(fit) %>% as.data.frame() %>% tibble::rownames_to_column("Signature") %>%
tidyr::pivot_longer(-Signature, names_to = "Sample",
values_to = "Contribution") %>% dplyr::mutate(Sample = factor(Sample,
levels = unique(Sample)), Signature = factor(Signature,
levels = unique(Signature)))
if (mode == "absolute") {
bar_geom <- geom_bar(position=position_stack(reverse = TRUE),stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
present_sigs <- tb %>% dplyr::filter(Contribution != 0) %>%
dplyr::pull(Signature) %>% unique()
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
}
a=plot_sigs(fit, mode="absolute")
a
tb
ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature))
ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature))+geom_bar(position=position_stack(reverse = TRUE),stat = "identity", colour = "black")
if (mode == "absolute") {
bar_geom <- geom_bar(position=position_stack(reverse = TRUE),stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
mode="absolute"
if (mode == "absolute") {
bar_geom <- geom_bar(position=position_stack(reverse = TRUE),stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
bar_geom
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
plot
plot_sigs<-function(fit, mode = c("relative", "absolute"), signatures=NA){
mode <- match.arg(mode)
if(!(is.na(signatures))){
fit=fit[,signatures]
}
#if there are less than 10 mutations assgined to a signature, remove those
# signatures from the plot
zero_sigs=which(colSums(fit)<10)
fit=fit[,-zero_sigs]
Sample <- Contribution <- Signature <- NULL
if (mode == "absolute" ) {
abs_contribution <- fit
}
tb <-t(fit) %>% as.data.frame() %>% tibble::rownames_to_column("Signature") %>%
tidyr::pivot_longer(-Signature, names_to = "Sample",
values_to = "Contribution") %>% dplyr::mutate(Sample = factor(Sample,
levels = unique(Sample)), Signature = factor(Signature,
levels = unique(Signature)))
if (mode == "absolute") {
bar_geom <- geom_bar(position=position_stack(reverse = TRUE),stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
present_sigs <- tb %>% dplyr::filter(Contribution != 0) %>%
dplyr::pull(Signature) %>% unique()
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
}
a=plot_sigs(fit, mode="absolute")
a
fit
if (mode == "absolute") {
bar_geom <- geom_bar(position=position_stack(reverse = TRUE),stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
present_sigs <- tb %>% dplyr::filter(Contribution != 0) %>%
dplyr::pull(Signature) %>% unique()
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
a=plot_sigs(fit, mode="absolute")
plot
colSums(fit)
rowSums(fit)
which(example_nonvcf$SampleID=="TCGA.A2.A0T5")
example_nonvcf=example_nonvcf[-which(example_nonvcf$SampleID=="TCGA.A2.A0T5"),]
save(example_nonvcf,file="exampl_nonvcf.rda")
exampledata=read_nonvcf(example_nonvcf, bsg=bsg)
mutmat=mutmat_nonvcf(exampledata)
ex=assign_signature(known_sig_mat,mutmat)
fit=ex$coefficient
fit
plot_sigs<-function(fit, mode = c("relative", "absolute"), signatures=NA){
mode <- match.arg(mode)
if(!(is.na(signatures))){
fit=fit[,signatures]
}
#if there are less than 10 mutations assgined to a signature, remove those
# signatures from the plot
zero_sigs=which(colSums(fit)<10)
fit=fit[,-zero_sigs]
Sample <- Contribution <- Signature <- NULL
tb <-t(fit) %>% as.data.frame() %>% tibble::rownames_to_column("Signature") %>%
tidyr::pivot_longer(-Signature, names_to = "Sample",
values_to = "Contribution") %>% dplyr::mutate(Sample = factor(Sample,
levels = unique(Sample)), Signature = factor(Signature,
levels = unique(Signature)))
if (mode == "absolute") {
bar_geom <- geom_bar(position=position_stack(reverse = TRUE),stat = "identity", colour = "black")
y_lab <- "Absolute contribution \n (no. mutations)"
} else if (mode == "relative") {
bar_geom <- geom_bar(position = "fill", stat = "identity",
colour = "black")
y_lab <- "Relative contribution"
}
present_sigs <- tb %>% dplyr::filter(Contribution != 0) %>%
dplyr::pull(Signature) %>% unique()
plot <- ggplot(tb, aes(x = Sample, y = Contribution, fill = Signature)) +
bar_geom + labs(x = "", y = y_lab) + scale_fill_discrete(breaks = present_sigs) +
theme_bw() + theme(panel.grid.minor.x = element_blank(),
panel.grid.major.x = element_blank(), panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank())+theme(axis.title.x=element_blank(),
axis.text.x=element_blank())
}
a=plot_sigs(fit, mode="absolute")
a
